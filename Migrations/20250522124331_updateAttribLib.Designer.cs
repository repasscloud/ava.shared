// <auto-generated />
using System;
using Ava.Shared.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ava.Shared.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250522124331_updateAttribLib")]
    partial class updateAttribLib
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ava.Shared.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Ava.Shared.Models.Custom.QantasCustomBookingRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "_clientCode");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "_date");

                    b.Property<string>("DepartCity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "_departCity");

                    b.Property<string>("DestinationCity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "_destinationCity");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "_employeeCode");

                    b.Property<bool>("IsOneWay")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "_isOneWay");

                    b.Property<int>("PassengerCount")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "_numberOfPeople");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "_ref");

                    b.Property<string>("ReturnDate")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "_returnDate");

                    b.Property<string>("_currencyCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "_currencyCode");

                    b.Property<string>("_fareClass")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "_fareClass");

                    b.Property<bool>("_includeJetstar")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "_includeJetstar");

                    b.HasKey("Id");

                    b.ToTable("QantasCustomBookingRequest");
                });

            modelBuilder.Entity("Ava.Shared.Models.Custom.QantasCustomIATACode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IATACode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "IATA_Code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "Name");

                    b.HasKey("Id");

                    b.ToTable("QantasCustomIATACodes");
                });

            modelBuilder.Entity("Ava.Shared.Models.DTOs.FlightOfferSearchRequestDTO", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int>("Adults")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "adults");

                    b.Property<string>("CabinClass")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "cabinClass");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "clientId");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "customerId");

                    b.Property<string>("DepartureDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "departureDate");

                    b.Property<string>("DepartureDateReturn")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "departureDateReturn");

                    b.Property<string>("DestinationLocationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "destinationLocationCode");

                    b.Property<bool>("IsOneWay")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "isOneWay");

                    b.Property<string>("OriginLocationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "originLocationCode");

                    b.Property<string>("TravelPolicyId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "travelPolicyId");

                    b.HasKey("Id");

                    b.ToTable("FlightOfferSearchRequestDTOs");
                });

            modelBuilder.Entity("Ava.Shared.Models.ExternalLib.Amadeus.AmadeusOAuthToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExpiresIn")
                        .HasColumnType("integer");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AmadeusOAuthTokens");
                });

            modelBuilder.Entity("Ava.Shared.Models.ExternalLib.GitHub.GitHubRepoOAuthToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Repo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GitHubRepoOAuthTokens");
                });

            modelBuilder.Entity("Ava.Shared.Models.ExternalLib.IATA.IATAAirportCodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "continent");

                    b.Property<int?>("ElevationFt")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "elevation_ft");

                    b.Property<string>("GPSCode")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "gps_code");

                    b.Property<string>("HomeLink")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "home_link");

                    b.Property<string>("IATACode")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "iata_code");

                    b.Property<string>("ICAOCode")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "icao_code");

                    b.Property<string>("Identity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "ident");

                    b.Property<string>("IsoCountry")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "iso_country");

                    b.Property<string>("IsoRegion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "iso_region");

                    b.Property<string>("Keywords")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "keywords");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric")
                        .HasAnnotation("Relational:JsonPropertyName", "latitude_deg");

                    b.Property<string>("LocalCode")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "local_code");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric")
                        .HasAnnotation("Relational:JsonPropertyName", "longitude_deg");

                    b.Property<string>("Municipality")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "municipality");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("ScheduledService")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "scheduled_service");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<string>("WikipediaLink")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "wikipedia_link");

                    b.Property<string>("_Region")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "_region");

                    b.HasKey("Id");

                    b.ToTable("IATAAirportCodes");
                });

            modelBuilder.Entity("Ava.Shared.Models.ExternalLib.TravelPayouts.TPCityIATACode", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "code");

                    b.Property<string>("CityCode")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "city_code");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "country_code");

                    b.Property<bool>("Flightable")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "flightable");

                    b.Property<string>("IataType")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "iata_type");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "time_zone");

                    b.HasKey("Code");

                    b.ToTable("TPCityIATACodes");
                });

            modelBuilder.Entity("Ava.Shared.Models.ExternalLib.Wikipedia.AircraftTypeDesignator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IATATypeCode")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "iata_type_code");

                    b.Property<string>("ICAOCode")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "icao_code");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "model");

                    b.Property<string>("WikipediaLink")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "wikipedia_link");

                    b.HasKey("Id");

                    b.ToTable("AircraftTypeDesignators");
                });

            modelBuilder.Entity("Ava.Shared.Models.Kernel.Billing.LateFeeConfig", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<decimal>("FixedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("GracePeriodDays")
                        .HasColumnType("integer");

                    b.Property<string>("LicenseAgreementId")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<decimal>("MaxLateFeeCap")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("PercentOfInvoice")
                        .HasPrecision(6, 4)
                        .HasColumnType("numeric(6,4)");

                    b.Property<int>("RecurringOption")
                        .HasColumnType("integer");

                    b.Property<bool>("UseFixedAmount")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("LateFeeConfigs");
                });

            modelBuilder.Entity("Ava.Shared.Models.Kernel.Billing.LicenseAgreement", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<decimal>("AccessFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("AccountThreshold")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ActivityFeeType")
                        .HasColumnType("integer");

                    b.Property<decimal>("ActivityMarkupPercent")
                        .HasPrecision(5, 4)
                        .HasColumnType("numeric(5,4)");

                    b.Property<decimal>("ActivityPerItemFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("AutoRenew")
                        .HasColumnType("boolean");

                    b.Property<string>("AvaClientId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("BillingFrequency")
                        .HasColumnType("integer");

                    b.Property<int>("BillingType")
                        .HasColumnType("integer");

                    b.Property<int>("CarFeeType")
                        .HasColumnType("integer");

                    b.Property<decimal>("CarMarkupPercent")
                        .HasPrecision(5, 4)
                        .HasColumnType("numeric(5,4)");

                    b.Property<decimal>("CarPerItemFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Discount")
                        .HasPrecision(5, 4)
                        .HasColumnType("numeric(5,4)");

                    b.Property<DateTime?>("DiscountExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FlightFeeType")
                        .HasColumnType("integer");

                    b.Property<decimal>("FlightMarkupPercent")
                        .HasPrecision(5, 4)
                        .HasColumnType("numeric(5,4)");

                    b.Property<decimal>("FlightPerItemFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("GracePeriodDays")
                        .HasColumnType("integer");

                    b.Property<int>("HotelFeeType")
                        .HasColumnType("integer");

                    b.Property<decimal>("HotelMarkupPercent")
                        .HasPrecision(5, 4)
                        .HasColumnType("numeric(5,4)");

                    b.Property<decimal>("HotelPerItemFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LateFeeConfigId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentTerms")
                        .HasColumnType("integer");

                    b.Property<decimal>("PnrChangeFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("PnrCreationFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("PrepaidBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("RailFeeType")
                        .HasColumnType("integer");

                    b.Property<decimal>("RailMarkupPercent")
                        .HasPrecision(5, 4)
                        .HasColumnType("numeric(5,4)");

                    b.Property<decimal>("RailPerItemFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("RemittanceEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TaxRate")
                        .HasPrecision(6, 4)
                        .HasColumnType("numeric(6,4)");

                    b.Property<int>("TransferFeeType")
                        .HasColumnType("integer");

                    b.Property<decimal>("TransferMarkupPercent")
                        .HasPrecision(5, 4)
                        .HasColumnType("numeric(5,4)");

                    b.Property<decimal>("TransferPerItemFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("TravelFeeType")
                        .HasColumnType("integer");

                    b.Property<decimal>("TravelMarkupPercent")
                        .HasPrecision(5, 4)
                        .HasColumnType("numeric(5,4)");

                    b.Property<decimal>("TravelPerItemFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("TrialEndsOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("LicenseAgreements");
                });

            modelBuilder.Entity("Ava.Shared.Models.Kernel.BoH.AvaEmployeeRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmployeeType")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PrivateKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AvaEmployees");
                });

            modelBuilder.Entity("Ava.Shared.Models.Kernel.BoH.AvaSalesRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AvaEmployeeRecordId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<string>("LicenseId")
                        .HasColumnType("character varying(22)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SalesDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SalesPerson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LicenseId");

                    b.ToTable("AvaSalesRecords");
                });

            modelBuilder.Entity("Ava.Shared.Models.Kernel.Client.Attribs.SupportedCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SupportedCountries");
                });

            modelBuilder.Entity("Ava.Shared.Models.Kernel.Client.Attribs.SupportedCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Iso4217")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SupportedCurrencies");
                });

            modelBuilder.Entity("Ava.Shared.Models.Kernel.Client.Attribs.SupportedDialCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SupportedDialCodes");
                });

            modelBuilder.Entity("Ava.Shared.Models.Kernel.Client.Attribs.SupportedTaxId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TaxIdType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SupportedTaxIds");
                });

            modelBuilder.Entity("Ava.Shared.Models.Kernel.Client.AvaClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine3")
                        .HasColumnType("text");

                    b.Property<string>("AdminPersonCountryCode")
                        .HasColumnType("text");

                    b.Property<string>("AdminPersonEmail")
                        .HasColumnType("text");

                    b.Property<string>("AdminPersonFirstName")
                        .HasColumnType("text");

                    b.Property<string>("AdminPersonJobTitle")
                        .HasColumnType("text");

                    b.Property<string>("AdminPersonLastName")
                        .HasColumnType("text");

                    b.Property<string>("AdminPersonPhone")
                        .HasColumnType("text");

                    b.Property<string>("BillingPersonCountryCode")
                        .HasColumnType("text");

                    b.Property<string>("BillingPersonEmail")
                        .HasColumnType("text");

                    b.Property<string>("BillingPersonFirstName")
                        .HasColumnType("text");

                    b.Property<string>("BillingPersonJobTitle")
                        .HasColumnType("text");

                    b.Property<string>("BillingPersonLastName")
                        .HasColumnType("text");

                    b.Property<string>("BillingPersonPhone")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactPersonCountryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactPersonEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactPersonFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactPersonJobTitle")
                        .HasColumnType("text");

                    b.Property<string>("ContactPersonLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactPersonPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("DefaultCurrency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("DefaultTravelPolicyId")
                        .HasColumnType("character varying(14)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicenseAgreementId")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("TaxId")
                        .HasColumnType("text");

                    b.Property<string>("TaxIdType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TaxLastValidated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DefaultTravelPolicyId");

                    b.ToTable("AvaClients");
                });

            modelBuilder.Entity("Ava.Shared.Models.Kernel.Client.AvaClientLicense", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(22)
                        .HasColumnType("character varying(22)");

                    b.Property<string>("AppID")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ClientID")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("GeneratedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IssuedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Signature")
                        .HasColumnType("text");

                    b.Property<decimal>("SpendThreshold")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("AvaClientLicenses");
                });

            modelBuilder.Entity("Ava.Shared.Models.Kernel.Client.AvaClientSupportedDomain", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AvaClientId")
                        .HasColumnType("integer");

                    b.Property<string>("ClientCode")
                        .HasColumnType("text");

                    b.Property<string>("SupportedEmailDomain")
                        .IsRequired()
                        .HasMaxLength(253)
                        .HasColumnType("character varying(253)");

                    b.HasKey("Id");

                    b.HasIndex("AvaClientId");

                    b.HasIndex("SupportedEmailDomain")
                        .IsUnique();

                    b.ToTable("AvaClientSupportedDomains");
                });

            modelBuilder.Entity("Ava.Shared.Models.Kernel.Jwt.AvaAIAppJwtToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<string>("JwtToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AvaAIAppJwtTokens");
                });

            modelBuilder.Entity("Ava.Shared.Models.Kernel.Jwt.AvaJwtTokenResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<string>("JwtToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AvaJwtTokenResponses");
                });

            modelBuilder.Entity("Ava.Shared.Models.Kernel.SysVar.AvaSystemLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("AvaSystemLogs");
                });

            modelBuilder.Entity("Ava.Shared.Models.Kernel.SysVar.StorageEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "expires");

                    b.Property<string>("SerializedData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "serializedData");

                    b.HasKey("Id");

                    b.ToTable("StorageEntries");
                });

            modelBuilder.Entity("Ava.Shared.Models.Kernel.User.AvaUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AspNetUsersId")
                        .HasColumnType("text");

                    b.Property<int?>("AvaClientId")
                        .HasColumnType("integer");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<string>("DefaultCurrencyCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "currency");

                    b.Property<string>("DefaultFlightSeating")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExcludedAirlineCodes")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IncludedAirlineCodes")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxFlightPrice")
                        .HasColumnType("integer");

                    b.Property<string>("MaxFlightSeating")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<bool>("NonStopFlight")
                        .HasColumnType("boolean");

                    b.Property<string>("OriginLocationCode")
                        .HasColumnType("text");

                    b.Property<string>("TravelPolicyId")
                        .HasColumnType("character varying(14)");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUsersId")
                        .IsUnique();

                    b.HasIndex("AvaClientId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("TravelPolicyId");

                    b.ToTable("AvaUsers");
                });

            modelBuilder.Entity("Ava.Shared.Models.Kernel.User.AvaUserSysPreference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AspNetUsersId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("AvaClientId")
                        .HasColumnType("integer");

                    b.Property<string>("CabinClassCoverage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<int?>("DefaultCalendarDaysInAdvanceForFlightBooking")
                        .HasColumnType("integer");

                    b.Property<string>("DefaultCurrencyCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "currency");

                    b.Property<string>("DefaultFlightSeating")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EnableSaturdayFlightBookings")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSundayFlightBookings")
                        .HasColumnType("boolean");

                    b.Property<string>("ExcludedAirlineCodes")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FlightBookingTimeAvailableFrom")
                        .HasColumnType("text");

                    b.Property<string>("FlightBookingTimeAvailableTo")
                        .HasColumnType("text");

                    b.Property<string>("IncludedAirlineCodes")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxFlightPrice")
                        .HasColumnType("integer");

                    b.Property<string>("MaxFlightSeating")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxResults")
                        .HasColumnType("integer");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<bool>("NonStopFlight")
                        .HasColumnType("boolean");

                    b.Property<string>("OriginLocationCode")
                        .HasColumnType("text");

                    b.Property<string>("TravelPolicyId")
                        .HasColumnType("character varying(14)");

                    b.Property<string>("TravelPolicyName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AvaClientId");

                    b.HasIndex("TravelPolicyId");

                    b.ToTable("AvaUserSysPreferences");
                });

            modelBuilder.Entity("Ava.Shared.Models.Policies.Continent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RegionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IsoCode")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RegionId");

                    b.ToTable("Continents");
                });

            modelBuilder.Entity("Ava.Shared.Models.Policies.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContinentId")
                        .HasColumnType("integer");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContinentId");

                    b.HasIndex("IsoCode")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Ava.Shared.Models.Policies.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Ava.Shared.Models.Policies.TravelPolicy", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<int>("AvaClientId")
                        .HasColumnType("integer");

                    b.Property<string>("CabinClassCoverage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("DefaultCalendarDaysInAdvanceForFlightBooking")
                        .HasColumnType("integer");

                    b.Property<string>("DefaultCurrencyCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "currency");

                    b.Property<string>("DefaultFlightSeating")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EnableSaturdayFlightBookings")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSundayFlightBookings")
                        .HasColumnType("boolean");

                    b.Property<string>("ExcludedAirlineCodes")
                        .HasColumnType("text");

                    b.Property<string>("FlightBookingTimeAvailableFrom")
                        .HasColumnType("text");

                    b.Property<string>("FlightBookingTimeAvailableTo")
                        .HasColumnType("text");

                    b.Property<string>("IncludedAirlineCodes")
                        .HasColumnType("text");

                    b.Property<int>("MaxFlightPrice")
                        .HasColumnType("integer");

                    b.Property<string>("MaxFlightSeating")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("NonStopFlight")
                        .HasColumnType("boolean");

                    b.Property<string>("PolicyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AvaClientId");

                    b.ToTable("TravelPolicies");
                });

            modelBuilder.Entity("Ava.Shared.Models.Policies.TravelPolicyDisabledCountry", b =>
                {
                    b.Property<string>("TravelPolicyId")
                        .HasColumnType("character varying(14)");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.HasKey("TravelPolicyId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("TravelPolicyDisabledCountries");
                });

            modelBuilder.Entity("Ava.Shared.Models.Search.Flights.FlightSearchCriteria", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Adults")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "adults");

                    b.Property<int?>("Children")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "children");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "currencyCode");

                    b.Property<string>("DepartureDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "departureDate");

                    b.Property<string>("DestinationLocationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "destinationLocationCode");

                    b.Property<string>("ExcludedAirlineCodes")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "excludedAirlineCodes");

                    b.Property<string>("IncludedAirlineCodes")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "includedAirlineCodes");

                    b.Property<int?>("Infants")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "infants");

                    b.Property<int?>("MaxPrice")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "maxPrice");

                    b.Property<int?>("MaxResultCount")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "max");

                    b.Property<bool>("NonStop")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "nonStop");

                    b.Property<string>("OriginLocationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "originLocationCode");

                    b.Property<string>("ReturnDate")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "returnDate");

                    b.Property<int>("TravelClass")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "travelClass");

                    b.Property<string>("_clientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "_clientId");

                    b.Property<DateTime>("_createdAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "_createdAt");

                    b.Property<string>("_customerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "_customerId");

                    b.HasKey("Id");

                    b.ToTable("FlightSearchCriterias");
                });

            modelBuilder.Entity("Ava.Shared.Models.Search.Travel.TravelSearchRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ActivitySubComponent")
                        .HasColumnType("integer");

                    b.Property<int>("CarSubComponent")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FlightSubComponent")
                        .HasColumnType("integer");

                    b.Property<int>("HotelSubComponent")
                        .HasColumnType("integer");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RailSubComponent")
                        .HasColumnType("integer");

                    b.Property<string>("SearchId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TransferSubComponent")
                        .HasColumnType("integer");

                    b.Property<int>("TravelType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TravelSearchRecords");
                });

            modelBuilder.Entity("ContinentTravelPolicy", b =>
                {
                    b.Property<int>("ContinentsId")
                        .HasColumnType("integer");

                    b.Property<string>("TravelPolicyId")
                        .HasColumnType("character varying(14)");

                    b.HasKey("ContinentsId", "TravelPolicyId");

                    b.HasIndex("TravelPolicyId");

                    b.ToTable("ContinentTravelPolicy");
                });

            modelBuilder.Entity("CountryTravelPolicy", b =>
                {
                    b.Property<int>("CountriesId")
                        .HasColumnType("integer");

                    b.Property<string>("TravelPolicyId")
                        .HasColumnType("character varying(14)");

                    b.HasKey("CountriesId", "TravelPolicyId");

                    b.HasIndex("TravelPolicyId");

                    b.ToTable("CountryTravelPolicy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RegionTravelPolicy", b =>
                {
                    b.Property<int>("RegionsId")
                        .HasColumnType("integer");

                    b.Property<string>("TravelPolicyId")
                        .HasColumnType("character varying(14)");

                    b.HasKey("RegionsId", "TravelPolicyId");

                    b.HasIndex("TravelPolicyId");

                    b.ToTable("RegionTravelPolicy");
                });

            modelBuilder.Entity("Ava.Shared.Models.ExternalLib.TravelPayouts.TPCityIATACode", b =>
                {
                    b.OwnsOne("Ava.Shared.Models.ExternalLib.TravelPayouts.Coordinates", "Coordinates", b1 =>
                        {
                            b1.Property<string>("TPCityIATACodeCode")
                                .HasColumnType("text");

                            b1.Property<double>("Lat")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "lat");

                            b1.Property<double>("Lon")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "lon");

                            b1.HasKey("TPCityIATACodeCode");

                            b1.ToTable("TPCityIATACodes");

                            b1.HasAnnotation("Relational:JsonPropertyName", "coordinates");

                            b1.WithOwner()
                                .HasForeignKey("TPCityIATACodeCode");
                        });

                    b.OwnsOne("Ava.Shared.Models.ExternalLib.TravelPayouts.NameTranslations", "NameTranslations", b1 =>
                        {
                            b1.Property<string>("TPCityIATACodeCode")
                                .HasColumnType("text");

                            b1.Property<string>("En")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasAnnotation("Relational:JsonPropertyName", "en");

                            b1.HasKey("TPCityIATACodeCode");

                            b1.ToTable("TPCityIATACodes");

                            b1.HasAnnotation("Relational:JsonPropertyName", "name_translations");

                            b1.WithOwner()
                                .HasForeignKey("TPCityIATACodeCode");
                        });

                    b.Navigation("Coordinates")
                        .IsRequired();

                    b.Navigation("NameTranslations")
                        .IsRequired();
                });

            modelBuilder.Entity("Ava.Shared.Models.Kernel.BoH.AvaSalesRecord", b =>
                {
                    b.HasOne("Ava.Shared.Models.Kernel.Client.AvaClientLicense", "License")
                        .WithMany()
                        .HasForeignKey("LicenseId");

                    b.Navigation("License");
                });

            modelBuilder.Entity("Ava.Shared.Models.Kernel.Client.AvaClient", b =>
                {
                    b.HasOne("Ava.Shared.Models.Policies.TravelPolicy", "DefaultTravelPolicy")
                        .WithMany()
                        .HasForeignKey("DefaultTravelPolicyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DefaultTravelPolicy");
                });

            modelBuilder.Entity("Ava.Shared.Models.Kernel.Client.AvaClientSupportedDomain", b =>
                {
                    b.HasOne("Ava.Shared.Models.Kernel.Client.AvaClient", "AvaClient")
                        .WithMany()
                        .HasForeignKey("AvaClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvaClient");
                });

            modelBuilder.Entity("Ava.Shared.Models.Kernel.User.AvaUser", b =>
                {
                    b.HasOne("Ava.Shared.Models.Kernel.Client.AvaClient", "AvaClient")
                        .WithMany("Users")
                        .HasForeignKey("AvaClientId");

                    b.HasOne("Ava.Shared.Models.Policies.TravelPolicy", "TravelPolicy")
                        .WithMany()
                        .HasForeignKey("TravelPolicyId");

                    b.Navigation("AvaClient");

                    b.Navigation("TravelPolicy");
                });

            modelBuilder.Entity("Ava.Shared.Models.Kernel.User.AvaUserSysPreference", b =>
                {
                    b.HasOne("Ava.Shared.Models.Kernel.Client.AvaClient", "AvaClient")
                        .WithMany()
                        .HasForeignKey("AvaClientId");

                    b.HasOne("Ava.Shared.Models.Policies.TravelPolicy", "TravelPolicy")
                        .WithMany()
                        .HasForeignKey("TravelPolicyId");

                    b.Navigation("AvaClient");

                    b.Navigation("TravelPolicy");
                });

            modelBuilder.Entity("Ava.Shared.Models.Policies.Continent", b =>
                {
                    b.HasOne("Ava.Shared.Models.Policies.Region", "Region")
                        .WithMany("Continents")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Ava.Shared.Models.Policies.Country", b =>
                {
                    b.HasOne("Ava.Shared.Models.Policies.Continent", "Continent")
                        .WithMany("Countries")
                        .HasForeignKey("ContinentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Continent");
                });

            modelBuilder.Entity("Ava.Shared.Models.Policies.TravelPolicy", b =>
                {
                    b.HasOne("Ava.Shared.Models.Kernel.Client.AvaClient", "AvaClient")
                        .WithMany("TravelPolicies")
                        .HasForeignKey("AvaClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvaClient");
                });

            modelBuilder.Entity("Ava.Shared.Models.Policies.TravelPolicyDisabledCountry", b =>
                {
                    b.HasOne("Ava.Shared.Models.Policies.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ava.Shared.Models.Policies.TravelPolicy", "TravelPolicy")
                        .WithMany("DisabledCountries")
                        .HasForeignKey("TravelPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("TravelPolicy");
                });

            modelBuilder.Entity("ContinentTravelPolicy", b =>
                {
                    b.HasOne("Ava.Shared.Models.Policies.Continent", null)
                        .WithMany()
                        .HasForeignKey("ContinentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ava.Shared.Models.Policies.TravelPolicy", null)
                        .WithMany()
                        .HasForeignKey("TravelPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryTravelPolicy", b =>
                {
                    b.HasOne("Ava.Shared.Models.Policies.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ava.Shared.Models.Policies.TravelPolicy", null)
                        .WithMany()
                        .HasForeignKey("TravelPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ava.Shared.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ava.Shared.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ava.Shared.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ava.Shared.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RegionTravelPolicy", b =>
                {
                    b.HasOne("Ava.Shared.Models.Policies.Region", null)
                        .WithMany()
                        .HasForeignKey("RegionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ava.Shared.Models.Policies.TravelPolicy", null)
                        .WithMany()
                        .HasForeignKey("TravelPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ava.Shared.Models.Kernel.Client.AvaClient", b =>
                {
                    b.Navigation("TravelPolicies");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Ava.Shared.Models.Policies.Continent", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Ava.Shared.Models.Policies.Region", b =>
                {
                    b.Navigation("Continents");
                });

            modelBuilder.Entity("Ava.Shared.Models.Policies.TravelPolicy", b =>
                {
                    b.Navigation("DisabledCountries");
                });
#pragma warning restore 612, 618
        }
    }
}
